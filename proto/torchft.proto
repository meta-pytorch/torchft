// Copyright (c) Meta Platforms, Inc. and affiliates.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

syntax = "proto3";
package torchft;

import "google/protobuf/timestamp.proto";

message RaftMessageRequest {
    // Request message contains the serialized Raft proto message.
    bytes message = 1;
}

message RaftMessageResponse {
}

message NodeInfo {
    uint64 rank = 1;
    string address = 2;
}

message InfoRequest {
    NodeInfo requester = 1;
}

message InfoResponse {
    repeated NodeInfo peers = 1;
}

service CoordinatorService {
    rpc RaftMessage (RaftMessageRequest) returns (RaftMessageResponse);
    rpc Info (InfoRequest) returns (InfoResponse);
}

message QuorumMember {
    string replica_id = 1;
    string address = 2;
    string store_address = 3;
    int64 step = 4;
    uint64 world_size = 5;
}

message Quorum {
    int64 quorum_id = 1;
    repeated QuorumMember participants = 2;
    google.protobuf.Timestamp created = 3;
}

message LighthouseQuorumRequest {
    QuorumMember requester = 1;
}

message LighthouseQuorumResponse {
    Quorum quorum = 1;
}

message LighthouseHeartbeatRequest {
    string replica_id = 1;
}

message LighthouseHeartbeatResponse {}

service LighthouseService {
    rpc Quorum (LighthouseQuorumRequest) returns (LighthouseQuorumResponse);
    rpc Heartbeat (LighthouseHeartbeatRequest) returns (LighthouseHeartbeatResponse);
}

message ManagerQuorumRequest {
    int64 rank = 1;
    int64 step = 2;
    string checkpoint_server_addr = 3;
}

message ManagerQuorumResponse {
    int64 quorum_id = 1;
    string address = 2;
    string store_address = 3;
    // These are information for the replicas which are at the max step.
    int64 max_step = 4;
    optional int64 max_rank = 5;
    int64 max_world_size = 6;
    // These are information for all replicas including behind replicas.
    int64 replica_rank = 7;
    int64 replica_world_size = 8;
    bool heal = 9;
}

message CheckpointAddressRequest {
    int64 rank = 1;
}

message CheckpointAddressResponse {
    string checkpoint_server_address = 1;
}

message ShouldCommitRequest {
    bool should_commit = 1;
    int64 rank = 2;
    int64 step = 3;
}
message ShouldCommitResponse {
    bool should_commit = 1;
}

message KillRequest {
    string msg = 1;
}
message KillResponse {}

service ManagerService {
    rpc Quorum (ManagerQuorumRequest) returns (ManagerQuorumResponse);
    rpc CheckpointAddress(CheckpointAddressRequest) returns (CheckpointAddressResponse);
    rpc ShouldCommit(ShouldCommitRequest) returns (ShouldCommitResponse);
    rpc Kill(KillRequest) returns (KillResponse);
}
